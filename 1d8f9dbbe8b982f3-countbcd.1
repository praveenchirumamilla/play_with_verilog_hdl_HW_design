module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q);
    
    // sequential logic for ena
  /*  always @(posedge clk) begin
        if(reset) begin
            ena <= 3'b0;
        end else begin
            ena[1] <= (q[3:0] == 4'b1001) ? 1'b1 : 1'b0;
            ena[2] <= (q[7:4] == 4'b1001) ? 1'b1 : 1'b0;
            ena[3] <= (q[11:8] == 4'b1001) ? 1'b1 : 1'b0;
        end
    end */
    
    // seq logic for counter incrementing
    always @(posedge clk) begin
        if(reset) begin
           q <= 16'b0; 
        end else begin
            q[3:0] <= (q[3:0] == 4'b1001) ? 4'b0 : (q[3:0] + 1'b1);
            //q[7:4] <= (q[7:4] == 4'b1001) ? 4'b0 : (ena[1] ? (q[7:4] + 1'b1) : q[7:4]);
            q[7:4] <= en[2] ? 4'b0 : (ena[1] ? (q[7:4] + 1'b1) : q[7:4]);
            //q[11:8] <= (q[11:8] == 4'b1001) ? 4'b0 : (ena[2] ? (q[11:8] + 1'b1) : q[11:8]);
            q[11:8] <= en[3] ? 4'b0 : (ena[2] ? (q[11:8] + 1'b1) : q[11:8]);
            q[15:12] <= (q[15:12] == 4'b1001) & en[3] ? 4'b0 : (ena[3] ? (q[15:12] + 1'b1) : q[15:12]);       
        end
        
    end
    
    assign  ena[1] = (q[3:0] == 4'b1001) ? 1'b1 : 1'b0;
    assign  ena[2] = ((q[7:4] == 4'b1001) & ena[1]) ? 1'b1 : 1'b0;
    assign  ena[3] = ((q[11:8] == 4'b1001) & ena[2]) ? 1'b1 : 1'b0;

endmodule
