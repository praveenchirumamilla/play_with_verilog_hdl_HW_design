module top_module(
    input clk,
    input areset,

    input  predict_valid,
    input  [6:0] predict_pc,
    output predict_taken,
    output [6:0] predict_history,

    input train_valid,
    input train_taken,
    input train_mispredicted,
    input [6:0] train_history,
    input [6:0] train_pc
);
    
    reg [1:0] pht [127:0];   // Pattern history table
    reg [6:0] ght;   // Global history table
    
    // --------------------------------------------------
    // ----- State transition for training --------------
    // --------------------------------------------------
    localparam SNT = 0, WNT = 1, WT = 2, ST = 3;
    reg [1:0] int_state, next_state;
    
    // fetch the state from PHT
   // assign int_state = train_valid ? pht[train_pc ^ train_history] : WNT;
    
    // Seq logic
   /* always @(posedge clk, posedge areset) begin
        if(areset) begin
            int_state <= WNT;
        end else begin
            int_state <= next_state;
        end
    end */
    
    // Combo logic
    always @(*) begin
       if (train_valid) begin
          //case(int_state) 
          case(pht[train_pc ^ train_history])
              SNT   : next_state = (train_valid & train_taken) ? WNT :  pht[train_pc ^ train_history];
              WNT   : next_state = train_valid ? (train_taken ? WT : SNT) : pht[train_pc ^ train_history];
              WT    : next_state = train_valid ? (train_taken ? ST : WNT) : pht[train_pc ^ train_history];
              ST    : next_state = train_valid ? (train_taken ? ST : WT) : pht[train_pc ^ train_history];
          endcase
        end 
      /*  if (train_valid) begin
          //case(int_state) 
            case(pht[train_pc ^ ght])
                SNT   : next_state = (train_valid & train_taken) ? WNT :  pht[train_pc ^ ght];
                WNT   : next_state = train_valid ? (train_taken ? WT : SNT) : pht[train_pc ^ ght];
                WT    : next_state = train_valid ? (train_taken ? ST : WNT) : pht[train_pc ^ ght];
                ST    : next_state = train_valid ? (train_taken ? ST : WT) : pht[train_pc ^ ght];
          endcase
        end */
    end
    
    // --------------------------------------------------
    
    // Seq logic
    always @(posedge clk, posedge areset) begin
        if(areset) begin
            for(int i = 0; i < 128; i = i+1) begin
                pht[i] <= WNT;
            end
            ght <= 7'b0;
            //predict_taken <= 1'b0;
        end else begin
             
         /*    if( train_mispredicted ) begin
                 ght[train_pc ^ train_history]  <= {train_history[5:0], train_taken};    
             end else if (train_valid) begin 
                 pht[train_pc ^ train_history] <= next_state;
             end else if(predict_valid ) begin
                predict_history <= {predict_history[5:0], predict_taken};
                predict_taken <= pht[predict_pc ^ predict_history][1];
            end */ 

            if(train_valid) begin
                pht[train_pc ^ train_history] <= next_state;
            end else if( train_mispredicted ) begin
                ght <= {train_history[5:0], train_taken};
            end else if(predict_valid ) begin
                ght <= {predict_history[5:0], predict_taken};
                //predict_taken <= pht[predict_pc ^ ght][1];
            end
        end
    end

    // combo logic assignment for predictions.
    assign predict_taken = pht[predict_pc ^ ght][1];
    assign predict_history = ght;
endmodule
