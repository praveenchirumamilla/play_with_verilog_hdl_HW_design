module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 
    
    parameter LEFT=0, RIGHT=1, AAH = 2, DIG = 3;
    reg [1:0] state, next_state, prev_state;

    always @(*) begin
        // State transition logic
        case(state)
            LEFT  : next_state = ~ground ? AAH : (dig ? DIG : ((prev_state == AAH) & bump_left) ? RIGHT : (bump_left ? RIGHT : LEFT));
            RIGHT : next_state = ~ground ? AAH : (dig ? DIG : ((prev_state == AAH) & bump_right) ? LEFT : (bump_right ? LEFT : RIGHT));
            AAH   : next_state = ground ? prev_state : AAH;
            //AAH   : next_state = ground ? LEFT : AAH;
            DIG   : next_state = ~ground ? AAH : DIG;
        endcase
    end

    always @(posedge clk, posedge areset) begin
        // State flip-flops with asynchronous reset
        if(areset) begin
           state <= LEFT; 
        end else begin
            state <= next_state;
            if(next_state < AAH)
                prev_state <= next_state;
        end
    end

    // Output logic
    assign walk_left = (state == LEFT);
    assign walk_right = (state == RIGHT);
    assign aaah = (state == AAH);
    assign digging = (state == DIG);


endmodule
