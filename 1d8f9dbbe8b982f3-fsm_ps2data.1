module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done); //

    parameter byte1 = 0, byte2 = 1, byte3 = 2, out = 3;
    reg [1:0] state, next_state;

    // State transition logic (combinational)
    always @(*) begin
        case(state)
            byte1 : next_state = in[3] ? byte2 : byte1;
            byte2 : next_state = byte3;
            byte3 : next_state = out;
            out  : next_state = in[3] ? byte2 : byte1;
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk) begin
        if(reset) begin
           state <= byte1; 
        end else begin
            state <= next_state;
            case(state)
                byte1 : out_bytes[23:16] <= in;
                byte2 : out_bytes[15:8] <= in;
                byte3 : out_bytes[7:0] <= in;
            endcase
        end
    end
 
    // Output logic
    assign done = (state == out);
    

endmodule
