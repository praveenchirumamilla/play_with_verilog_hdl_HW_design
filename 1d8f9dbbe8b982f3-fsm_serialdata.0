module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); //

localparam s=0, data = 1, stop = 2, wait_stop = 3;
    reg [1:0] state, next_state;
    reg [2:0] count;
    
    //Seq logic
    always @(posedge clk) begin
        if(reset) begin
            state <= s;
            count <= 3'b0;
            out_byte <= 8'b0;
        end else begin
           state <= next_state;
           done <= (state == stop) & in;
            
            if(state == data) begin
                count <= count + 1'b1;
                out_byte <= {in, out_byte[7:1]};
            end        
        end
    end

    // Combo logic
    always @(*) begin
        case(state) 
            s     : next_state = in ? state : data;
            data  : next_state = &count ? stop : state;
            stop  : next_state = in ? s : wait_stop;
            wait_stop : next_state = in ? s : state;
        endcase
    end
endmodule

