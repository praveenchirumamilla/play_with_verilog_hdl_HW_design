module top_module (
    input clk,
    input reset,      // Synchronous reset
    input data,
    output shift_ena,
    output counting,
    input done_counting,
    output done,
    input ack );
    
    parameter s=0, s1 = 1, s11 = 2, s110=3, shift0 = 4, shift1 = 5, shift2 = 6, shift3 = 7, count = 8, wait_done=9;
    reg [3:0] state, next_state;
    
    // Combo logic
    always @(*) begin
        case(state)
            s     		: next_state = data ? s1 : s;
            s1   		: next_state = data ? s11 : s;
            s11   		: next_state = data ? s11 : s110;
            s110   		: next_state = data ? shift0 : s;
            shift0 		: next_state = shift1;
            shift1 		: next_state = shift2;
            shift2 		: next_state = shift3;
            shift3 		: next_state = count;
            count  		: next_state = done_counting ? wait_done : count;
            wait_done   : next_state = ack ? s : wait_done;
        endcase
    end
    
    assign shift_ena = state[2];
    assign done = (state == wait_done);
    
    // Sequential logic
    always @(posedge clk) begin
        if(reset) begin
            state <= s;
        end else begin
           state <= next_state;
        end
    end

endmodule
